---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.0.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.0.0
    container_name: broker
    depends_on:
      - zookeeper
    ports:
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines:
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup.
    # If the latter is true, you will need to change the value 'localhost' in
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use broker:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

  schema-registry:
    image: confluentinc/cp-schema-registry:6.0.0
    container_name: schema-registry
    ports: 
      - 8081:8081
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'

  kafka-connect:
    image: confluentinc/cp-kafka-connect-base:6.0.0
    container_name: kafka-connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "broker:29092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _docker-connect-status
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
    command: 
      - bash 
      - -c 
      - |
        echo "Installing connector plugins"
        # confluent-hub install --no-prompt castorm/kafka-connect-http:0.7.6
        # confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:5.5.2
        confluent-hub install --no-prompt jcustenborder/kafka-connect-transform-xml:0.1.0.18
        confluent-hub install --no-prompt streamthoughts/kafka-connect-file-pulse:1.5.0
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:1.3.0
        confluent-hub install --no-prompt confluentinc/kafka-connect-ibmmq:5.5.2
        #
        # Copy IBM MQ jars from the shared volume
        cp -v /tmp/jars/* /usr/share/confluent-hub-components/confluentinc-kafka-connect-ibmmq/lib/
        #
        # -----------
        # Launch the Kafka Connect worker
        /etc/confluent/docker/run &
        #
        # Don't exit
        sleep infinity
    volumes:
      - $PWD/data:/data
      - mq-jars:/tmp/jars

  ksqldb:
    image: confluentinc/ksqldb-server:0.12.0
    container_name: ksqldb
    depends_on:
      - broker
      - kafka-connect
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_CONNECT_URL: http://kafka-connect:8083
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KSQL_KSQL_SERVICE_ID: _confluent_rmoff_01
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*'

  kafkacat:
    image: edenhill/kafkacat:1.6.0
    container_name: kafkacat
    entrypoint: 
      - /bin/sh 
      - -c 
      - |
        apk add jq; 
        while [ 1 -eq 1 ];do sleep 60;done

  ibmmq:
    # *-----------------------------*
    # Check the web interface & REST API is running:
    #   docker exec ibmmq dspmqweb status
    #
    # Web interface: https://localhost:9443/ibmmq/console/#/ (admin/Admin123)
    #
    # REST API: https://www.ibm.com/support/knowledgecenter/SSFKSJ_9.1.0/com.ibm.mq.ref.dev.doc/q130750_.htm
    #
    # CLI to put message onto queue: 
    #   docker exec ibmmq /opt/mqm/samp/bin/amqsput DEV.QUEUE.1 QM1
    #   docker exec ibmmq /opt/mqm/samp/bin/amqsget DEV.QUEUE.1 QM1
    # *-----------------------------*
    image: ibmcom/mq:9.2.0.0-r2
    container_name: ibmmq
    ports:
    - "9443:9443"
    environment:
      LICENSE: "accept"
      MQ_ADMIN_PASSWORD: "Admin123"
      MQ_APP_PASSWORD: "Admin123"
      MQ_QMGR_NAME: "QM1"
    # entrypoint: 
    #   - bash 
    #   - -c 
    #   - |
    #     #
    #     # -----------
    #     # Launch the MQ server
    #     runmqdevserver
    #     #
    #     # Don't exit
    #     sleep infinity
    volumes:
      - mq-jars:/opt/mqm/java/lib/

  mongodb:
    # *-----------------------------*
    # To connect to mongoDB
    #   docker exec --interactive --tty mongodb mongo localhost:27017
    # *-----------------------------*
    image: mongo:4.4.1
    container_name: mongodb
    ports: 
    - "27017:27017"

volumes:
  mq-jars: {}